import React, {useEffect, useRef, useState} from 'react';

import axios from "axios";
import Select from 'react-select';
import AsyncSelect from 'react-select/async';

import {placeOfCargoOptions, customTheme} from "../../../templates/templatesOfOptions";
import {
  getCountries,
  getCitiesFrom,
  getCitiesTo,
  createModifyCountryObj,
  createModifyCitiesFromObj,
  createModifyCitiesToObj
} from "../../../templates/templateGetCountryAndCity";

import './CountryForm.scss'

const CountryForm = ({setIdFrom, setIdTo, cityWarningTo, setWarningTo, cityWarningFrom, setWarningFrom}) => {

  const [allCountries, setAllCountries] = useState([])
  const [allCitiesFrom, setAllCitiesFrom] = useState([])
  const [allCitiesTo, setAllCitiesTo] = useState([])
  const [modifyCountryObj ,setModifyCountryObj] = useState([])
  const [modifyCitiesFromObj ,setModifyCitiesFromObj] = useState([])
  const [modifyCitiesToObj ,setModifyCitiesToObj] = useState([])
  const [optionCountryFromValue, setOptionCountryFromValue] = useState({})
  const [optionCountryToValue, setOptionCountryToValue] = useState({})

  const prevCountryFromValue = useRef()
  const prevCountryToValue = useRef()

  const prevCountryFrom = prevCountryFromValue.current;
  const prevCountryTo = prevCountryToValue.current;

  const filterCitiesFrom = (inputValue) => {
    return modifyCitiesFromObj.filter(i =>
        i.label.toLowerCase().includes(inputValue.toLowerCase())
    );
  };

  const loadOptionsFrom = (inputValue, callback) => {
    setTimeout(() => {
      callback(filterCitiesFrom(inputValue));
    }, 1000);
  };

  const filterCitiesTo = (inputValue) => {
    return modifyCitiesToObj.filter(i =>
        i.label.toLowerCase().includes(inputValue.toLowerCase())
    );
  };

  const loadOptionsTo = (inputValue, callback) => {
    setTimeout(() => {
      callback(filterCitiesTo(inputValue));
    }, 1000);
  };

  const selectedCityIdFromHandler = (newValue) => {
    setIdFrom(newValue.id)
    return newValue
  }

  const selectedCityIdToHandler = (newValue) => {
    setIdTo(newValue.id)
    return newValue
  }

  useEffect(() => {
    prevCountryFromValue.current = optionCountryFromValue.value;
  }, [optionCountryFromValue.value]);

  useEffect(() => {
    prevCountryToValue.current = optionCountryToValue.value;
  }, [optionCountryToValue.value]);

  useEffect(() => {
    createModifyCountryObj(allCountries, setModifyCountryObj)
  }, [allCountries])

  useEffect(() => {
    createModifyCitiesFromObj(allCitiesFrom, setModifyCitiesFromObj)
  }, [allCitiesFrom])

  useEffect(() => {
    createModifyCitiesToObj(allCitiesTo, setModifyCitiesToObj)
  }, [allCitiesTo])

  useEffect(() => {
    getCountries(setAllCountries)
  }, [])

  useEffect(() => {
    getCitiesFrom(prevCountryFrom, optionCountryFromValue, setAllCitiesFrom)
  }, [optionCountryFromValue.value])

  useEffect(() => {
    getCitiesTo(prevCountryTo, optionCountryToValue, setAllCitiesTo)
  }, [optionCountryToValue.value])

  return (
      <div className={'country-form-wrapper'}>
        <div className={'from-form-wrapper'}>
          <div className={'from-form-title-wrapper'}>
            <div className={'from-form-title'}>–ó–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑</div>
            <div className={'from-form-text'}>–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</div>
          </div>
          <div className={'country-select-from'}>
            <label htmlFor="country">–°—Ç—Ä–∞–Ω–∞</label>
            <Select
                theme={customTheme}
                options={modifyCountryObj}
                onChange={setOptionCountryFromValue}
                noOptionsMessage={() => `–ù–µ –Ω–∞–π–¥–µ–Ω–æ üñï`}
                placeholder={'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É'}
            />
          </div>
          <div className={'city-select-from'}>
            <label htmlFor="country">–ì–æ—Ä–æ–¥</label>
            <AsyncSelect
                theme={customTheme}
                loadOptions={loadOptionsFrom}
                options={modifyCitiesFromObj}
                onChange={selectedCityIdFromHandler}
                noOptionsMessage={() => '–ù–µ –Ω–∞–π–¥–µ–Ω–æ üñï'}
                placeholder={'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥'}
            />
          </div>
          <div className={'place-select-from'}>
            <label htmlFor="place">–ú–µ—Å—Ç–æ</label>
            <Select
                theme={customTheme}
                options={placeOfCargoOptions}
                noOptionsMessage={() => `–ù–µ –Ω–∞–π–¥–µ–Ω–æ üñï`}
                placeholder={'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}
            />
          </div>
        </div>
        <div className={'where-form-wrapper'}>
          <div className={'where-form-title-wrapper'}>
            <div className={'where-form-title'}>–î–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ</div>
            <div className={'where-form-text'}>–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</div>
          </div>
          <div className={'country-select-where'}>
            <label htmlFor="country">–°—Ç—Ä–∞–Ω–∞</label>
            <Select
                theme={customTheme}
                options={modifyCountryObj}
                onChange={setOptionCountryToValue}
                noOptionsMessage={() => `–ù–µ –Ω–∞–π–¥–µ–Ω–æ üñï`}
                placeholder={'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É'}
            />
          </div>
          <div className={'city-select-where'}>
            <label htmlFor="country">–ì–æ—Ä–æ–¥</label>
            <AsyncSelect
                theme={customTheme}
                loadOptions={loadOptionsTo}
                options={modifyCitiesToObj}
                onChange={selectedCityIdToHandler}
                noOptionsMessage={() => '–ù–µ –Ω–∞–π–¥–µ–Ω–æ üñï'}
                placeholder={'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥'}
            />
          </div>
          <div className={'place-select-where'}>
            <label htmlFor="place">–ú–µ—Å—Ç–æ</label>
            <Select
                theme={customTheme}
                options={placeOfCargoOptions}
                noOptionsMessage={() => `–ù–µ –Ω–∞–π–¥–µ–Ω–æ üñï`}
                placeholder={'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–∏–±—ã—Ç–∏—è'}
            />
          </div>
        </div>
      </div>
  );
};

export default CountryForm;